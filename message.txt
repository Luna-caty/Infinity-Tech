-- ============================================================
-- DATABASE SCHEMA
-- ============================================================

-- Users table
CREATE TABLE Users (
    id_user INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('client', 'admin') DEFAULT 'client'
);

-- Products master table
CREATE TABLE Products (
    id_product INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    prix DECIMAL(10,2) NOT NULL,
    image_principale VARCHAR(255),
    type ENUM('laptop', 'smartphone', 'accessoire', 'composant') NOT NULL
);

-- Laptops table
CREATE TABLE Laptops (
    id_pc INT PRIMARY KEY AUTO_INCREMENT,
    id_product INT UNIQUE, 
    name VARCHAR(100) NOT NULL,
    marque VARCHAR(50) NOT NULL,
    cpu VARCHAR(100) NOT NULL,
    gpu VARCHAR(100),
    ram VARCHAR(50) NOT NULL,
    stockage VARCHAR(100) NOT NULL,
    ecran VARCHAR(100) NOT NULL,
    batterie VARCHAR(50),
    design VARCHAR(100),
    systeme_exploitation VARCHAR(50),
    poids VARCHAR(20),
    description TEXT,
    prix DECIMAL(10,2) NOT NULL,
    quantite_stock INT NOT NULL DEFAULT 0,
    image_principale VARCHAR(255),
    FOREIGN KEY (id_product) REFERENCES Products(id_product) ON DELETE CASCADE
);

-- Smartphones table
CREATE TABLE Smartphones (
    id_phone INT PRIMARY KEY AUTO_INCREMENT,
    id_product INT UNIQUE, 
    name VARCHAR(100) NOT NULL,
    marque VARCHAR(50) NOT NULL,
    processeur VARCHAR(100) NOT NULL,
    ecran VARCHAR(100) NOT NULL,
    ram VARCHAR(50) NOT NULL,
    stockage VARCHAR(50) NOT NULL,
    appareil_photo VARCHAR(255) NOT NULL,
    batterie VARCHAR(50) NOT NULL,
    securite VARCHAR(100),
    design VARCHAR(100),
    dimensions VARCHAR(100),
    poids VARCHAR(20),
    description TEXT,
    prix DECIMAL(10,2) NOT NULL,
    quantite_stock INT NOT NULL DEFAULT 0,
    image_principale VARCHAR(255),
    FOREIGN KEY (id_product) REFERENCES Products(id_product) ON DELETE CASCADE
);

-- Accessories table
CREATE TABLE Accessoires (
    id_accessoire INT PRIMARY KEY AUTO_INCREMENT,
    id_product INT UNIQUE, 
    name VARCHAR(100) NOT NULL,
    marque VARCHAR(50) NOT NULL,
    type_accessoire ENUM('Clavier', 'Souris', 'Casque', 'Écran', 'Hub USB', 'Webcam', 'Tapis de souris', 'Enceintes', 'Refroidissement', 'Manette') NOT NULL,
    specifications TEXT,
    compatibilite TEXT,
    description TEXT,
    prix DECIMAL(10,2) NOT NULL,
    quantite_stock INT NOT NULL DEFAULT 0,
    image_principale VARCHAR(255),
    FOREIGN KEY (id_product) REFERENCES Products(id_product) ON DELETE CASCADE
);

-- Components table
CREATE TABLE Stockage_Composants (
    id_composant INT PRIMARY KEY AUTO_INCREMENT,
    id_product INT UNIQUE, 
    name VARCHAR(100) NOT NULL,
    marque VARCHAR(50) NOT NULL,
    type_composant ENUM('Disque Dur', 'SSD', 'Carte Graphique', 'Processeur', 'RAM', 'Carte Mère', 'Alimentation', 'Boîtier', 'Ventilateur', 'Watercooling') NOT NULL,
    capacite VARCHAR(100),
    specifications TEXT,
    compatibilite TEXT,
    description TEXT,
    prix DECIMAL(10,2) NOT NULL,
    quantite_stock INT NOT NULL DEFAULT 0,
    image_principale VARCHAR(255),
    FOREIGN KEY (id_product) REFERENCES Products(id_product) ON DELETE CASCADE
);

-- Cart table
CREATE TABLE Cart (
    id_cart INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    FOREIGN KEY (user_id) REFERENCES Users(id_user) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(id_product) ON DELETE CASCADE,
    UNIQUE KEY unique_cart_item (user_id, product_id)
);

-- Images table for multiple product images
CREATE TABLE Images (
    id_image INT PRIMARY KEY AUTO_INCREMENT,
    id_produit INT NOT NULL,
    type_produit ENUM('laptop', 'smartphone', 'accessoire', 'composant') NOT NULL,
    url_image VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_produit) REFERENCES Products(id_product) ON DELETE CASCADE
);

-- Orders table
CREATE TABLE Orders (
    id_order INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    date_commande DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id_user) ON DELETE CASCADE
);

-- Order Items table
CREATE TABLE Order_Items (
    id_item INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    prix_unitaire DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(id_order) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(id_product) ON DELETE CASCADE
);

-- ============================================================
-- STORED PROCEDURES
-- ============================================================

-- 1. Procédure pour afficher les détails d'une commande
DELIMITER //
CREATE PROCEDURE GetOrderDetails(IN p_order_id INT, IN p_user_id INT)
BEGIN
    DECLARE total_amount DECIMAL(10,2);
    
    -- Vérifier que la commande appartient à l'utilisateur
    IF NOT EXISTS (SELECT 1 FROM Orders WHERE id_order = p_order_id AND user_id = p_user_id) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cette commande n\'appartient pas à cet utilisateur';
    END IF;
    
    -- Détails de la commande
    SELECT o.id_order, o.date_commande, o.statut, o.adresse_livraison, u.first_name, u.last_name, u.email
    FROM Orders o
    JOIN Users u ON o.user_id = u.id_user
    WHERE o.id_order = p_order_id;
    
    -- Articles de la commande avec détails produits
    SELECT oi.product_id, p.name, p.type, oi.quantity, oi.prix_unitaire, 
           (oi.quantity * oi.prix_unitaire) AS sous_total
    FROM Order_Items oi
    JOIN Products p ON oi.product_id = p.id_product
    WHERE oi.order_id = p_order_id;
    
    -- Total de la commande
    SELECT total FROM Orders WHERE id_order = p_order_id;
END //
DELIMITER ;

-- 2. Procédure pour finaliser une commande
DELIMITER //
CREATE PROCEDURE FinalizeOrder(IN p_user_id INT, IN p_adresse_livraison TEXT, OUT p_order_id INT)
BEGIN
    DECLARE total_panier DECIMAL(10,2) DEFAULT 0;
    DECLARE exit_handler BOOLEAN DEFAULT FALSE;
    
    -- Démarrer une transaction
    START TRANSACTION;
    
    -- Vérifier si le panier contient des articles
    IF NOT EXISTS (SELECT 1 FROM Cart WHERE user_id = p_user_id) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le panier est vide';
    END IF;
    
    -- Vérifier la disponibilité des stocks pour tous les articles du panier
    IF EXISTS (
        SELECT c.product_id FROM Cart c 
        JOIN Products p ON c.product_id = p.id_product
        JOIN Laptops l ON p.id_product = l.id_product AND p.type = 'laptop'
        WHERE c.user_id = p_user_id AND c.quantity > l.quantite_stock
    ) OR EXISTS (
        SELECT c.product_id FROM Cart c 
        JOIN Products p ON c.product_id = p.id_product
        JOIN Smartphones s ON p.id_product = s.id_product AND p.type = 'smartphone'
        WHERE c.user_id = p_user_id AND c.quantity > s.quantite_stock
    ) OR EXISTS (
        SELECT c.product_id FROM Cart c 
        JOIN Products p ON c.product_id = p.id_product
        JOIN Accessoires a ON p.id_product = a.id_product AND p.type = 'accessoire'
        WHERE c.user_id = p_user_id AND c.quantity > a.quantite_stock
    ) OR EXISTS (
        SELECT c.product_id FROM Cart c 
        JOIN Products p ON c.product_id = p.id_product
        JOIN Stockage_Composants sc ON p.id_product = sc.id_product AND p.type = 'composant'
        WHERE c.user_id = p_user_id AND c.quantity > sc.quantite_stock
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuffisant pour certains articles';
    END IF;
    
    -- Calculer le total du panier
    SELECT SUM(c.quantity * p.prix) INTO total_panier
    FROM Cart c 
    JOIN Products p ON c.product_id = p.id_product
    WHERE c.user_id = p_user_id;
    
    -- Créer la commande
    INSERT INTO Orders (user_id, total, adresse_livraison)
    VALUES (p_user_id, total_panier, p_adresse_livraison);
    
    -- Récupérer l'ID de la commande créée
    SET p_order_id = LAST_INSERT_ID();
    
    -- Insérer les articles dans Order_Items
    INSERT INTO Order_Items (order_id, product_id, quantity, prix_unitaire)
    SELECT p_order_id, c.product_id, c.quantity, p.prix
    FROM Cart c
    JOIN Products p ON c.product_id = p.id_product
    WHERE c.user_id = p_user_id;
    
    -- Vider le panier
    DELETE FROM Cart WHERE user_id = p_user_id;
    
    -- Valider la transaction
    COMMIT;
END //
DELIMITER ;

-- 3. Procédure pour afficher l'historique des commandes
DELIMITER //
CREATE PROCEDURE GetOrderHistory(IN p_user_id INT)
BEGIN
    -- Commandes actives
    SELECT o.id_order, o.date_commande, o.statut, o.total,
           COUNT(oi.id_item) AS nombre_articles
    FROM Orders o
    JOIN Order_Items oi ON o.id_order = oi.order_id
    WHERE o.user_id = p_user_id
    GROUP BY o.id_order
    ORDER BY o.date_commande DESC;
    
    -- Commandes annulées (historique)
    SELECT coh.id_history, coh.order_id, coh.date_commande, 
           coh.date_annulation, coh.total, coh.raison_annulation,
           COUNT(cih.id_cancelled_item) AS nombre_articles
    FROM Cancelled_Orders_History coh
    JOIN Cancelled_Items_History cih ON coh.id_history = cih.history_id
    WHERE coh.user_id = p_user_id
    GROUP BY coh.id_history
    ORDER BY coh.date_annulation DESC;
END //
DELIMITER ;

-- ============================================================
-- TRIGGERS
-- ============================================================

-- 1. Trigger pour mettre à jour le stock après validation d'une commande
DELIMITER //
CREATE TRIGGER update_stock_after_order
AFTER INSERT ON Order_Items
FOR EACH ROW
BEGIN
    DECLARE product_type VARCHAR(20);
    
    -- Récupérer le type de produit
    SELECT type INTO product_type FROM Products WHERE id_product = NEW.product_id;
    
    -- Mettre à jour le stock en fonction du type de produit
    CASE product_type
        WHEN 'laptop' THEN
            UPDATE Laptops SET quantite_stock = quantite_stock - NEW.quantity 
            WHERE id_product = NEW.product_id;
        WHEN 'smartphone' THEN
            UPDATE Smartphones SET quantite_stock = quantite_stock - NEW.quantity 
            WHERE id_product = NEW.product_id;
        WHEN 'accessoire' THEN
            UPDATE Accessoires SET quantite_stock = quantite_stock - NEW.quantity 
            WHERE id_product = NEW.product_id;
        WHEN 'composant' THEN
            UPDATE Stockage_Composants SET quantite_stock = quantite_stock - NEW.quantity 
            WHERE id_product = NEW.product_id;
    END CASE;
END //
DELIMITER ;

-- 2. Trigger pour empêcher l'insertion si stock insuffisant
DELIMITER //
CREATE TRIGGER check_stock_before_cart
BEFORE INSERT ON Cart
FOR EACH ROW
BEGIN
    DECLARE available_stock INT;
    DECLARE product_type VARCHAR(20);
    
    -- Récupérer le type de produit
    SELECT type INTO product_type FROM Products WHERE id_product = NEW.product_id;
    
    -- Vérifier le stock disponible selon le type de produit
    CASE product_type
        WHEN 'laptop' THEN
            SELECT quantite_stock INTO available_stock FROM Laptops WHERE id_product = NEW.product_id;
        WHEN 'smartphone' THEN
            SELECT quantite_stock INTO available_stock FROM Smartphones WHERE id_product = NEW.product_id;
        WHEN 'accessoire' THEN
            SELECT quantite_stock INTO available_stock FROM Accessoires WHERE id_product = NEW.product_id;
        WHEN 'composant' THEN
            SELECT quantite_stock INTO available_stock FROM Stockage_Composants WHERE id_product = NEW.product_id;
    END CASE;
    
    -- Empêcher l'insertion si quantité demandée > stock disponible
    IF NEW.quantity > available_stock THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuffisant pour ce produit';
    END IF;
END //
DELIMITER ;

-- 3. Trigger pour modifier la quantité dans le panier
DELIMITER //
CREATE TRIGGER check_stock_before_update_cart
BEFORE UPDATE ON Cart
FOR EACH ROW
BEGIN
    DECLARE available_stock INT;
    DECLARE product_type VARCHAR(20);
    
    -- Récupérer le type de produit
    SELECT type INTO product_type FROM Products WHERE id_product = NEW.product_id;
    
    -- Vérifier le stock disponible selon le type de produit
    CASE product_type
        WHEN 'laptop' THEN
            SELECT quantite_stock INTO available_stock FROM Laptops WHERE id_product = NEW.product_id;
        WHEN 'smartphone' THEN
            SELECT quantite_stock INTO available_stock FROM Smartphones WHERE id_product = NEW.product_id;
        WHEN 'accessoire' THEN
            SELECT quantite_stock INTO available_stock FROM Accessoires WHERE id_product = NEW.product_id;
        WHEN 'composant' THEN
            SELECT quantite_stock INTO available_stock FROM Stockage_Composants WHERE id_product = NEW.product_id;
    END CASE;
    
    -- Empêcher la mise à jour si quantité demandée > stock disponible
    IF NEW.quantity > available_stock THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuffisant pour ce produit';
    END IF;
END //
DELIMITER ;

-- 4. Trigger pour restaurer le stock après annulation d'une commande
DELIMITER //
CREATE TRIGGER restore_stock_after_cancel
AFTER UPDATE ON Orders
FOR EACH ROW
BEGIN
    DECLARE is_cancelled BOOLEAN;
    
    -- Vérifier si la commande vient d'être annulée
    SET is_cancelled = (NEW.statut = 'annulée' AND OLD.statut != 'annulée');
    
    -- Si la commande est annulée, restaurer le stock
    IF is_cancelled THEN
        -- Créer une entrée dans l'historique des commandes annulées
        INSERT INTO Cancelled_Orders_History (order_id, user_id, date_commande, total)
        VALUES (OLD.id_order, OLD.user_id, OLD.date_commande, OLD.total);
        
        -- Obtenir l'ID de l'historique créé
        SET @history_id = LAST_INSERT_ID();
        
        -- Pour chaque article de la commande
        BEGIN
            DECLARE done INT DEFAULT FALSE;
            DECLARE item_product_id INT;
            DECLARE item_quantity INT;
            DECLARE item_prix DECIMAL(10,2);
            DECLARE product_type VARCHAR(20);
            
            -- Déclarer le curseur pour parcourir les articles
            DECLARE cur CURSOR FOR 
                SELECT oi.product_id, oi.quantity, oi.prix_unitaire, p.type
                FROM Order_Items oi
                JOIN Products p ON oi.product_id = p.id_product
                WHERE oi.order_id = OLD.id_order;
            
            DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
            
            OPEN cur;
            
            read_loop: LOOP
                FETCH cur INTO item_product_id, item_quantity, item_prix, product_type;
                
                IF done THEN
                    LEAVE read_loop;
                END IF;
                
                -- Restaurer le stock selon le type de produit
                CASE product_type
                    WHEN 'laptop' THEN
                        UPDATE Laptops SET quantite_stock = quantite_stock + item_quantity 
                        WHERE id_product = item_product_id;
                    WHEN 'smartphone' THEN
                        UPDATE Smartphones SET quantite_stock = quantite_stock + item_quantity 
                        WHERE id_product = item_product_id;
                    WHEN 'accessoire' THEN
                        UPDATE Accessoires SET quantite_stock = quantite_stock + item_quantity 
                        WHERE id_product = item_product_id;
                    WHEN 'composant' THEN
                        UPDATE Stockage_Composants SET quantite_stock = quantite_stock + item_quantity 
                        WHERE id_product = item_product_id;
                END CASE;
                
                -- Ajouter l'article à l'historique des annulations
                INSERT INTO Cancelled_Items_History (history_id, product_id, quantity, prix_unitaire)
                VALUES (@history_id, item_product_id, item_quantity, item_prix);
            END LOOP;
            
            CLOSE cur;
        END;
    END IF;
END //
DELIMITER ;

-- ============================================================
-- INTÉGRATION WEB - EXEMPLES D'UTILISATION PHP
-- ============================================================

/*
// Exemple d'utilisation de la procédure GetOrderDetails en PHP
function afficherDetailsCommande($orderId, $userId) {
    global $connexion;
    
    $stmt = $connexion->prepare("CALL GetOrderDetails(?, ?)");
    $stmt->bind_param("ii", $orderId, $userId);
    $stmt->execute();
    
    // Récupération des informations générales de la commande
    $result = $stmt->get_result();
    $orderInfo = $result->fetch_assoc();
    
    // Récupération des articles de la commande
    $stmt->next_result();
    $items = $stmt->get_result();
    
    // Récupération du total
    $stmt->next_result();
    $total = $stmt->get_result()->fetch_assoc();
    
    // Affichage des détails
    echo "<h2>Détails de la commande #" . $orderInfo['id_order'] . "</h2>";
    echo "<p>Date: " . $orderInfo['date_commande'] . "</p>";
    echo "<p>Statut: " . $orderInfo['statut'] . "</p>";
    echo "<p>Adresse de livraison: " . $orderInfo['adresse_livraison'] . "</p>";
    
    echo "<h3>Articles</h3>";
    echo "<table>";
    echo "<tr><th>Produit</th><th>Quantité</th><th>Prix unitaire</th><th>Sous-total</th></tr>";
    
    while ($item = $items->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $item['name'] . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        echo "<td>" . $item['prix_unitaire'] . " €</td>";
        echo "<td>" . $item['sous_total'] . " €</td>";
        echo "</tr>";
    }
    
    echo "</table>";
    echo "<p><strong>Total: " . $total['total'] . " €</strong></p>";
}

// Exemple d'utilisation de la procédure FinalizeOrder en PHP
function validerCommande($userId, $adresseLivraison) {
    global $connexion;
    
    $stmt = $connexion->prepare("CALL FinalizeOrder(?, ?, @order_id)");
    $stmt->bind_param("is", $userId, $adresseLivraison);
    
    try {
        $stmt->execute();
        $result = $connexion->query("SELECT @order_id as order_id");
        $orderId = $result->fetch_assoc()['order_id'];
        
        echo "<div class='alert alert-success'>";
        echo "Votre commande #" . $orderId . " a été validée avec succès!";
        echo "</div>";
        
        return $orderId;
    } catch (mysqli_sql_exception $e) {
        echo "<div class='alert alert-danger'>";
        echo "Erreur lors de la validation de la commande: " . $e->getMessage();
        echo "</div>";
        return false;
    }
}

// Exemple d'utilisation de la procédure GetOrderHistory en PHP
function afficherHistoriqueCommandes($userId) {
    global $connexion;
    
    $stmt = $connexion->prepare("CALL GetOrderHistory(?)");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    
    // Récupération des commandes actives
    $result = $stmt->get_result();
    
    echo "<h2>Vos commandes actives</h2>";
    if ($result->num_rows > 0) {
        echo "<table>";
        echo "<tr><th>Numéro</th><th>Date</th><th>Statut</th><th>Total</th><th>Articles</th><th>Action</th></tr>";
        
        while ($commande = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $commande['id_order'] . "</td>";
            echo "<td>" . $commande['date_commande'] . "</td>";
            echo "<td>" . $commande['statut'] . "</td>";
            echo "<td>" . $commande['total'] . " €</td>";
            echo "<td>" . $commande['nombre_articles'] . "</td>";
            echo "<td><a href='details_commande.php?id=" . $commande['id_order'] . "'>Détails</a></td>";
            echo "</tr>";
        }
        
        echo "</table>";
    } else {
        echo "<p>Vous n'avez pas de commande active.</p>";
    }
    
    // Récupération des commandes annulées
    $stmt->next_result();
    $cancelledOrders = $stmt->get_result();
    
    echo "<h2>Vos commandes annulées</h2>";
    if ($cancelledOrders->num_rows > 0) {
        echo "<table>";
        echo "<tr><th>Numéro</th><th>Date commande</th><th>Date annulation</th><th>Total</th><th>Articles</th><th>Raison</th></tr>";
        
        while ($commande = $cancelledOrders->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $commande['order_id'] . "</td>";
            echo "<td>" . $commande['date_commande'] . "</td>";
            echo "<td>" . $commande['date_annulation'] . "</td>";
            echo "<td>" . $commande['total'] . " €</td>";
            echo "<td>" . $commande['nombre_articles'] . "</td>";
            echo "<td>" . $commande['raison_annulation'] . "</td>";
            echo "</tr>";
        }
        
        echo "</table>";
    } else {
        echo "<p>Vous n'avez pas de commande annulée.</p>";
    }
}

// Exemple d'annulation d'une commande en PHP
function annulerCommande($orderId, $userId, $raison) {
    global $connexion;
    
    // Vérifier que la commande appartient à l'utilisateur
    $stmt = $connexion->prepare("SELECT id_order FROM Orders WHERE id_order = ? AND user_id = ?");
    $stmt->bind_param("ii", $orderId, $userId);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result->num_rows == 0) {
        echo "<div class='alert alert-danger'>Cette commande ne vous appartient pas.</div>";
        return false;
    }
    
    // Mettre à jour la commande à 'annulée'
    $stmt = $connexion->prepare("UPDATE Orders SET statut = 'annulée' WHERE id_order = ?");
    $stmt->bind_param("i", $orderId);
    
    try {
        $stmt->execute();
        
        // Mettre à jour la raison d'annulation dans l'historique
        $stmt = $connexion->prepare("UPDATE Cancelled_Orders_History SET raison_annulation = ? WHERE order_id = ?");
        $stmt->bind_param("si", $raison, $orderId);
        $stmt->execute();
        
        echo "<div class='alert alert-success'>La commande a été annulée avec succès.</div>";
        return true;
    } catch (mysqli_sql_exception $e) {
        echo "<div class='alert alert-danger'>Erreur lors de l'annulation: " . $e->getMessage() . "</div>";
        return false;
    }
}
*/